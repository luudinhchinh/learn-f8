### useEffect 
--> sử dụng khi muốn thực hiện các (side effect)-> chỉ tới chương trình phần mềm khi có tác động sảy ra thì chương trình thay đổi
(
    .events: add/remote event listener
    .observer pattern: subscrice/unsubscrice
    .closure
    .timer: setinterval, settimeout, clearinterval, cleartimeout
    .useState
    .mount/unmount

    .call api
)

1. update dom ->f8 blog title
2. call api
3. listen dom event
   .scroll
   .resize
4. clearnup
   .remotelistener / unsubscrice
   .clear timer





    //1 useEffect(callback)
 //-> gọi callback mỗi khi component re-render
 //-> gọi callback sau khi component thêm element vào dom
 //2 useEffect(callback,[])
 //-> chỉ gọi callback 1 lần khi combonent mount
 //3 useEffect(callback,[deps])
 //-> callback sẽ được gọi mỗi khi deps(giiongs như biến prop) thay dổi

// 1.callback luôn được gọi sau khi component mount
// clearn up function lun được gọi trước khi component unmount


// function Content(){      //1
//     const [title,setTitle]=useState("")
//     const [posts,setPosts]=useState([])
//    useEffect(()=>{
//     fetch('https://jsonplaceholder.typicode.com/posts')
//      .then(e=>{
//         return e.json()
//      })
//      .then(posts=>{
//         setPosts(posts)
//      })
//    },[])
//     return (
//         <div>
//             <input value={title} onChange={e=>{
//                 setTitle(e.target.value)
//             }} />
//             <ul>
//                 {posts.map((post)=>(
//                     <li key={post.id}>{post.title}</li>
//                 ))}
//             </ul>
//         </div>
//     )
// }

// function Content(){      //2
//    const [title,setTitle]=useState('')
//    const [posts,setPosts]=useState([])
//    useEffect(()=>{
//     fetch('https://jsonplaceholder.typicode.com/posts')
//     .then(res=> res.json())
//     .then(posts=>setPosts(posts))
//    },[])
//     return (
//         <div>
//             <input value={title} onChange={e=>{
//                 setTitle(e.target.value)
//             }} />
//             <ul>
//                 {
//                     posts.map((post)=>(
//                         <li key={post.id}>{post.title}</li>
//                     ))
//                 }
//             </ul>
//         </div>
//     )
// }

const codes = ['posts','comments','albums']
function Content(){       //3
    const [title,setTitle]=useState('')
   const [posts,setPosts]=useState([])
   const [type,setType]=useState('posts')
   useEffect(()=>{
    fetch(`https://jsonplaceholder.typicode.com/${type}`)
    .then(res=>{
        return res.json()
    })
    .then(post=>{
        setPosts(post)
    })
   },[type])
    return (
        <div>
            {codes.map((code)=>(
                <button key={code} onClick={()=>{setType(code)}} style={type===code?{color:'#fff',backgroundColor:'#333'}:{}}>{code}</button>
            ))}
            <input value={title} onChange={e=>{
                setTitle(e.target.value)
            }} />
            <ul>
                {posts.map(post=>(
                    <li key={post.id}>{post.title || post.name}</li>
                ))}
            </ul>
        </div>
    )
}